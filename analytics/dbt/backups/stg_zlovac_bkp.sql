{{ config(
  enabled=false
) }}

with source as (
    SELECT * FROM {{ source('external_cellar_s3', 'zlovac') }}
), renamed_data AS (
    SELECT AFF  as aff,
	DIR as dir,
	SIP as sip,
	"FF X" as ff_x,
	"FF Y" as ff_y,
	ANNEE as annee,
	TXTLV as txtlv,
	VLCAD as vlcad,
	BATLOC as batloc,
	CCODEP as ccodep,
	GROUPE as groupe,
	LIBCOM as libcom,
	NATURE as nature,
	REFCAD as refcad,
	COMMUNE as commune,
	LIBVOIE as libvoie,
	"LOC NUM"  as loc_num,
	ADRESSE1 as adresse1,
	ADRESSE2 as adresse2,
	ADRESSE3 as adresse3,
	ADRESSE4 as adresse4,
	"FF CCTHP" as ff_ccthp,
	"DVF VEFA" as dvf_vefa,
	"FF CTPDL" as ff_ctpdl,
	"FF DNBWC" as ff_dnbwc,
	"FF IDBAT" as ff_idbat,
	"FF IDPAR" as ff_idpar,
	"FF IDSEC" as ff_idsec,
	"FF STOTH" as ff_stoth,
	"LOC VOIE" as loc_voie,
	ANREFTHLV as anrefthlv,
	"DVF NBLOG" as dvf_nblog,
	"FF DNBBAI" as ff_dnbbai,
	"FF DNBDOU" as ff_dnbdou,
	"FF DVLTRT" as ff_dvltrt,
	"FF JDATAT" as ff_jdatat,
	"FF NDROIT" as ff_ndroit,
	"FF SLOCAL" as ff_slocal,
	"FF X 4326" as ff_x_4326,
	"FF Y 4326" as ff_y_4326,
	"FFH CCTHP" as ffh_ccthp,
	INVARIANT as invariant,
	"VL REVPRO" as vl_revpro,
	ANMUTATION as anmutation,
	"DVF FILTRE" as dvf_filtre,
	"FF CATPRO3" as ff_catpro3,
	"FF DCAPEC2" as ff_dcapec2,
	"FF IDLOCAL" as ff_idlocal,
	"FF JANNATH" as ff_jannath,
	"FF LOCPROP" as ff_locprop,
	"FFH JDATAT" as ffh_jdatat,
	"DVF DATEMUT" as dvf_datemut,
	"FF DDENOM 1" as ff_ddenom_1,
	"FF DDENOM 2" as ff_ddenom_2,
	"FF DDENOM 3" as ff_ddenom_3,
	"FF DDENOM 4" as ff_ddenom_4,
	"FF DDENOM 5" as ff_ddenom_5,
	"FF DDENOM 6" as ff_ddenom_6,
	"FF DLIGN3 1" as ff_dlign3_1,
	"FF DLIGN3 2" as ff_dlign3_2,
	"FF DLIGN3 3" as ff_dlign3_3,
	"FF DLIGN3 4" as ff_dlign3_4,
	"FF DLIGN3 5" as ff_dlign3_5,
	"FF DLIGN3 6" as ff_dlign3_6,
	"FF DLIGN4 1" as ff_dlign4_1,
	"FF DLIGN4 2" as ff_dlign4_2,
	"FF DLIGN4 3" as ff_dlign4_3,
	"FF DLIGN4 4" as ff_dlign4_4,
	"FF DLIGN4 5" as ff_dlign4_5,
	"FF DLIGN4 6" as ff_dlign4_6,
	"FF DLIGN5 1" as ff_dlign5_1,
	"FF DLIGN5 2" as ff_dlign5_2,
	"FF DLIGN5 3" as ff_dlign5_3,
	"FF DLIGN5 4" as ff_dlign5_4,
	"FF DLIGN5 5" as ff_dlign5_5,
	"FF DLIGN5 6" as ff_dlign5_6,
	"FF DLIGN6 1" as ff_dlign6_1,
	"FF DLIGN6 2" as ff_dlign6_2,
	"FF DLIGN6 3" as ff_dlign6_3,
	"FF DLIGN6 4" as ff_dlign6_4,
	"FF DLIGN6 5" as ff_dlign6_5,
	"FF DLIGN6 6" as ff_dlign6_6,
	"GESTRE PPRE" as gestre_ppre,
	"BAN LATITUDE" as ban_latitude,
    "BAN LONGITUDE" as ban_longitude,
	"BAN RESULT ID" as ban_result_id,
	"BAN POSTCODE" as ban_postcode,
    "BAN RESULT LABEL" as ban_result_label,
	"BAN RESULT SCORE" as ban_result_score,
	DEBUTVACANCE as debutvacance,
	"DVF NBLOCMUT" as dvf_nblocmut,
	"FF JDATNSS 1" as ff_jdatnss_1,
	"FF JDATNSS 2" as ff_jdatnss_2,
	"FF JDATNSS 3" as ff_jdatnss_3,
	"FF JDATNSS 4" as ff_jdatnss_4,
	"FF JDATNSS 5" as ff_jdatnss_5,
	"FF JDATNSS 6" as ff_jdatnss_6,
	"FF MILLESIME" as ff_millesime,
	"FF NPIECE P2" as ff_npiece_p2,
    "FF CATPRO2TXT" as ff_catpro2txt,
	PROPRIETAIRE as proprietaire,
	"DVF LIBNATMUT" as dvf_libnatmut,
	"DVF CODTYPBIEN" as dvf_codtypbien,
	"DVF CODTYPPROA" as dvf_codtypproa,
	"DVF CODTYPPROV" as dvf_codtypprov,
	"DVF IDMUTATION" as dvf_idmutation,
	"DVF LIBTYPBIEN" as dvf_libtypbien,
	"DVF VALEURFONC" as dvf_valeurfonc,
	"DISTANCE BAN FF" as distance_ban_ff,
	INTERCOMMUNALITE as intercommunalite,
	"POTENTIEL TLV THLV" as potentiel_tlv_thlv
    FROM source
), 
cleaned_data AS (
 SELECT
        invariant,
        ff_idlocal AS local_id,
        ff_idbat AS building9_id,
        ARRAY_CONSTRUCT(ltrim(trim(libvoie), '0'), trim(libcom)) AS raw_address,
        lpad(ccodep, 2, '0') || lpad(commune, 3, '0') AS geo_code,  
        TRY_CAST(REPLACE(ff_y_4326, ',', '.') AS DOUBLE) AS latitude,
        TRY_CAST(REPLACE(ff_x_4326, ',', '.') AS DOUBLE) AS longitude,
        ff_dcapec2 AS cadastral_classification,
        NULLIF(TRIM(UPPER(nature)), '') AS housing_kind,
        ff_npiece_p2 AS rooms_count,
        (COALESCE(NULLIF(TRIM(ff_dcapec2), '')::NUMBER, 0) > 6)
        OR
        (COALESCE(NULLIF(TRIM(ff_dnbwc), '')::NUMBER, 0) = 0)
        OR
        (
            COALESCE(NULLIF(TRIM(ff_dnbbai), '')::NUMBER, 0) +
            COALESCE(NULLIF(TRIM(ff_dnbdou), '')::NUMBER, 0) = 0
        ) AS uncomfortable,
        CASE
            WHEN TRY_CAST(ff_jannath AS NUMBER) > 100 THEN COALESCE(TRY_CAST(ff_jannath AS NUMBER), 0)
            ELSE 0 -- Adding an ELSE clause to handle all other cases, ensuring a default value is always provided
        END AS building_year,
        FLOOR(TRY_CAST(REPLACE(ff_stoth, ',', '.') AS NUMERIC)) AS living_area,
        refcad AS cadastral_reference,
        TRY_TO_DATE(anmutation, '{{ var("dateFormat") }}') AS mutation_date,
        CASE WHEN TRIM(txtlv) = '' THEN NULL ELSE TRUE END AS taxed,
        NULLIF(TRIM(annee), '') AS data_year,
        ff_ndroit AS beneficiary_count,
        NULLIF(TRIM(batloc), '') AS building_location,
        NULLIF(TRIM(vlcad), '') AS rental_value,
        NULLIF(TRIM(ff_ctpdl), '') AS ownership_kind,
        NULLIF(TRIM(ff_ccthp), '') AS ff_ccthp,
        TRY_CAST(NULLIF(TRIM(groupe), '') AS INTEGER) as groupe,
        TRY_CAST(debutvacance AS INTEGER) as vacancy_start_year,
        aff as aff,
        CASE WHEN TRIM(proprietaire) <> '' THEN TRIM(proprietaire) ELSE TRIM(gestre_ppre) END AS owner,
        CASE WHEN TRIM(proprietaire) <> '' THEN TRIM(gestre_ppre) END AS administrator,
        ARRAY_REMOVE(ARRAY_CONSTRUCT(NULLIF(TRIM(adresse1), ''), NULLIF(TRIM(adresse2), ''), NULLIF(TRIM(adresse3), ''), NULLIF(TRIM(adresse4), '')), NULL) AS owner_raw_address,
        ARRAY_REMOVE(ARRAY_CONSTRUCT(nullif(trim(ff_dlign3_2), ''), nullif(trim(ff_dlign4_2), ''), nullif(trim(ff_dlign5_2), ''), nullif(trim(ff_dlign6_2), '')), null) as owner_raw_address2,
        ARRAY_REMOVE(ARRAY_CONSTRUCT(nullif(trim(ff_dlign3_3), ''), nullif(trim(ff_dlign4_3), ''), nullif(trim(ff_dlign5_3), ''), nullif(trim(ff_dlign6_3), '')), null) as owner_raw_address3,
        ARRAY_REMOVE(ARRAY_CONSTRUCT(nullif(trim(ff_dlign3_4), ''), nullif(trim(ff_dlign4_4), ''), nullif(trim(ff_dlign5_4), ''), nullif(trim(ff_dlign6_4), '')), null) as owner_raw_address4,
        ARRAY_REMOVE(ARRAY_CONSTRUCT(nullif(trim(ff_dlign3_5), ''), nullif(trim(ff_dlign4_5), ''), nullif(trim(ff_dlign5_5), ''), nullif(trim(ff_dlign6_5), '')), null) as owner_raw_address5,
        ARRAY_REMOVE(ARRAY_CONSTRUCT(nullif(trim(ff_dlign3_6), ''), nullif(trim(ff_dlign4_6), ''), nullif(trim(ff_dlign5_6), ''), nullif(trim(ff_dlign6_6), '')), null) as owner_raw_address6,
		ARRAY_REMOVE(ARRAY_CONSTRUCT(NULLIF(TRIM(adresse1), ''), NULLIF(TRIM(adresse2), '')), NULL) AS owner_raw_address,
        ARRAY_REMOVE(ARRAY_CONSTRUCT(nullif(trim(ff_dlign3_2), ''), nullif(trim(ff_dlign4_2), ''),), null) as ff_owner_1_raw_address1,
        ARRAY_REMOVE(ARRAY_CONSTRUCT(nullif(trim(ff_dlign3_3), ''), nullif(trim(ff_dlign4_3), ''),), null) as ff_owner_2_raw_address2,
        ARRAY_REMOVE(ARRAY_CONSTRUCT(nullif(trim(ff_dlign3_4), ''), nullif(trim(ff_dlign4_4), ''),), null) as ff_owner_3_raw_address3,
        ARRAY_REMOVE(ARRAY_CONSTRUCT(nullif(trim(ff_dlign3_5), ''), nullif(trim(ff_dlign4_5), ''),), null) as ff_owner_4_raw_address4,
        ARRAY_REMOVE(ARRAY_CONSTRUCT(nullif(trim(ff_dlign3_6), ''), nullif(trim(ff_dlign4_6), ''), ), null) as ff_owner_5_raw_address5,
		adresse1 as owner_adresse1, adresse2 as owner_adresse2, adresse3 as owner_adresse3, adresse4 as owner_adresse4,
		ff_dlign3_2 as ff_owner_1_adresse_1, ff_dlign4_2 as ff_owner_1_adresse_2, ff_dlign5_2 as ff_owner_1_adresse_3, ff_dlign6_2 as ff_owner_1_adresse_4,
		ff_dlign3_3 as ff_owner_2_adresse_1, ff_dlign4_3 as ff_owner_2_adresse_2, ff_dlign5_3 as ff_owner_2_adresse_3, ff_dlign6_3 as ff_owner_2_adresse_4,
		ff_dlign3_4 as ff_owner_3_adresse_1, ff_dlign4_4 as ff_owner_3_adresse_2, ff_dlign5_4 as ff_owner_3_adresse_3, ff_dlign6_4 as ff_owner_3_adresse_4,
		ff_dlign3_5 as ff_owner_4_adresse_1, ff_dlign4_5 as ff_owner_4_adresse_2, ff_dlign5_5 as ff_owner_4_adresse_3, ff_dlign6_5 as ff_owner_4_adresse_4,
		ff_dlign3_6 as ff_owner_5_adresse_1, ff_dlign4_6 as ff_owner_5_adresse_2, ff_dlign5_6 as ff_owner_5_adresse_3, ff_dlign6_6 as ff_owner_5_adresse_4,

        upper(ff_ddenom_1) as full_name1,
        upper(ff_ddenom_2) as full_name2,
        upper(ff_ddenom_3) as full_name3,
        upper(ff_ddenom_4) as full_name4,
        upper(ff_ddenom_5) as full_name5,
        upper(ff_ddenom_6) as full_name6,
        TRY_TO_DATE(ff_jdatnss_1, '{{ var("dateFormat") }}') AS birth_date,
        TRY_TO_DATE(ff_jdatnss_2, '{{ var("dateFormat") }}') AS birth_date2,
        TRY_TO_DATE(ff_jdatnss_3, '{{ var("dateFormat") }}') AS birth_date3,
        TRY_TO_DATE(ff_jdatnss_4, '{{ var("dateFormat") }}') AS birth_date4,
        TRY_TO_DATE(ff_jdatnss_5, '{{ var("dateFormat") }}') AS birth_date5,
        TRY_TO_DATE(ff_jdatnss_6, '{{ var("dateFormat") }}') AS birth_date6,
        CASE
            WHEN TRIM(groupe::TEXT) = '' THEN 'Particulier'
            WHEN NOT(owner LIKE '%' || SPLIT_PART(TRIM(ff_ddenom_1), '/', 1) || '%') AND NOT(owner LIKE '%' || SPLIT_PART(SPLIT_PART(TRIM(ff_ddenom_1), '/', 2), ' ', 1) || '%') THEN 'Autre'
            WHEN ff_catpro2txt = 'INVESTISSEUR PROFESSIONNEL' THEN 'Investisseur'
            WHEN ff_catpro2txt = 'SOCIETE CIVILE A VOCATION IMMOBILIERE' THEN 'SCI'
            ELSE ff_catpro2txt
        END AS owner_kind_detail,
        CASE
            WHEN TRIM(groupe::TEXT) = '' THEN 'Particulier'
            ELSE 'Autre'
        END AS owner_kind
    FROM
        renamed_data
)

SELECT * FROM cleaned_data


