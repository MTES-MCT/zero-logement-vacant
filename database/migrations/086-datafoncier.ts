import { Knex } from 'knex';

exports.up = async (knex: Knex) => {
  await knex.schema.raw(`
    CREATE TABLE IF NOT EXISTS df_housing_nat (
      idlocal character varying(12),
      idbat character varying(16),
      idpar character varying(14),
      idtup character varying,
      idsec character varying(10),
      idvoie character varying(9),
      idprocpte character varying(11),
      idcom character varying(5),
      idcomtxt character varying(45),
      ccodep character varying(2),
      ccodir character varying(1),
      ccocom character varying(3),
      invar character varying(10),
      ccopre character varying(3),
      ccosec character varying(2),
      dnupla character varying(4),
      dnubat character varying(2),
      descc character varying(2),
      dniv character varying(2),
      dpor character varying(5),
      ccoriv character varying(4),
      ccovoi character varying(5),
      dnvoiri character varying(4),
      dindic character varying(1),
      ccocif character varying(4),
      dvoilib character varying(30),
      cleinvar character varying(1),
      ccpper character varying(3),
      gpdl character varying(1),
      ctpdl character varying(5),
      dnupro character varying(6),
      jdatat character varying(8),
      jdatatv character varying(8),
      jdatatan integer,
      dnufnl character varying(6),
      ccoeva character varying(1),
      ccoevatxt character varying(72),
      dteloc character varying(1),
      dteloctxt character varying(66),
      logh character varying(1),
      loghmais character varying(1),
      loghappt character varying(1),
      gtauom character varying(2),
      dcomrd character varying(3),
      ccoplc character varying(1),
      ccoplctxt character varying(140),
      cconlc character varying(2),
      cconlctxt character varying(43),
      dvltrt integer,
      cc48lc character varying(2),
      dloy48a integer,
      top48a character varying(1),
      dnatlc character varying(1),
      ccthp character varying(1),
      proba_rprs character varying(7),
      typeact character varying(4),
      loghvac character varying(1),
      loghvac2a character varying(1),
      loghvac5a character varying(1),
      loghvacdeb character varying(5),
      cchpr character varying(1),
      jannat character varying(4),
      dnbniv character varying(2),
      nbetagemax integer,
      nbnivssol integer,
      hlmsem character varying(1),
      loghlls character varying(15),
      postel character varying(1),
      dnatcg character varying(2),
      jdatcgl character varying(8),
      fburx integer,
      gimtom character varying(1),
      cbtabt character varying(2),
      jdbabt character varying(4),
      jrtabt character varying(4),
      cconac character varying(5),
      cconactxt character varying(129),
      toprev character varying(1),
      ccoifp integer,
      jannath integer,
      janbilmin integer,
      npevph integer,
      stoth integer,
      stotdsueic integer,
      npevd integer,
      stotd integer,
      npevp integer,
      sprincp integer,
      ssecp integer,
      ssecncp integer,
      sparkp integer,
      sparkncp integer,
      npevtot integer,
      slocal integer,
      npiece_soc integer,
      npiece_ff integer,
      npiece_i integer,
      npiece_p2 integer,
      nbannexe integer,
      nbgarpark integer,
      nbagrement integer,
      nbterrasse integer,
      nbpiscine integer,
      ndroit integer,
      ndroitindi integer,
      ndroitpro integer,
      ndroitges integer,
      catpro2 character varying(20),
      catpro2txt character varying(200),
      catpro3 character varying(30),
      catpropro2 character varying(20),
      catproges2 character varying(30),
      locprop character varying(1),
      locproptxt character varying(21),
      geomloc public.geometry(Point,2154),
      source_geo character varying(34),
      vecteur character varying(1),
      ban_id character varying(30),
      ban_type character varying(15),
      ban_score numeric,
      ban_cp character varying(5),
      ban_geom public.geometry(Point,2154),
      dis_ban_ff integer,
      idpk integer,
      code_epci character varying(10),
      lib_epci character varying(255)
    );
  `);
  await knex.schema.raw(`
    CREATE TABLE IF NOT EXISTS df_owners_nat (
      code_epci character varying(10),
      lib_epci character varying(255),
      idprodroit character varying(13),
      idprocpte character varying(11),
      idpersonne character varying(8),
      idvoie character varying(9),
      idcom character varying(5),
      idcomtxt character varying(45),
      ccodep character varying(2),
      ccodir character varying(1),
      ccocom character varying(3),
      dnupro character varying(6),
      dnulp character varying(2),
      ccocif character varying(4),
      dnuper character varying(6),
      ccodro character varying(1),
      ccodrotxt character varying(64),
      typedroit character varying(1),
      ccodem character varying(1),
      ccodemtxt character varying(28),
      gdesip character varying(1),
      gtoper character varying(1),
      ccoqua character varying(1),
      dnatpr character varying(3),
      dnatprtxt character varying(53),
      ccogrm character varying(2),
      ccogrmtxt character varying(46),
      dsglpm character varying(10),
      dforme character varying(4),
      ddenom character varying(60),
      gtyp3 character varying(1),
      gtyp4 character varying(1),
      gtyp5 character varying(1),
      gtyp6 character varying(1),
      dlign3 character varying(30),
      dlign4 character varying(36),
      dlign5 character varying(30),
      dlign6 character varying(32),
      ccopay character varying(3),
      ccodep1a2 character varying(2),
      ccodira character varying(1),
      ccocomadr character varying(3),
      ccovoi character varying(5),
      ccoriv character varying(4),
      dnvoiri character varying(4),
      dindic character varying(1),
      ccopos character varying(5),
      dqualp character varying(3),
      dnomlp character varying(30),
      dprnlp character varying(15),
      jdatnss character varying(10),
      dldnss character varying(58),
      dsiren character varying(9),
      topja character varying(1),
      datja character varying(8),
      dformjur character varying(4),
      dnomus character varying(60),
      dprnus character varying(40),
      locprop character varying(1),
      locproptxt character varying(21),
      catpro2 character varying(2),
      catpro2txt character varying(100),
      catpro3 character varying(3),
      catpro3txt character varying(105),
      idpk integer
    );
  `);
  await knex.schema.alterTable('df_housing_nat', (table) => {
    table.index('idprocpte');
  });
};

exports.down = async (knex: Knex) => {
  await knex.schema.dropTableIfExists('df_housing_nat');
  await knex.schema.dropTableIfExists('df_owners_nat');
};
